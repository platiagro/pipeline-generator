# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python application

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - name: Set Docker TAG
      id: var
      run: |
        echo ${{ github.ref }}
        if [ ${{ github.ref }} = "refs/heads/master" ]; then
          echo ::set-output name=TAG::0.1.0
        else
          echo ::set-output name=TAG::0.1.0-SNAPSHOT
        fi
    - uses: actions/checkout@v2
    - name: Set up Python 3.6
      uses: actions/setup-python@v1
      with:
        python-version: 3.6
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/requirements.txt
        pip install .
    - name: Test with pytest
      run: |
        pip install pytest pytest-cov
        coverage erase
        coverage run --branch --source=pipelines -m pytest
        coverage xml -i
    - name: Install Argo
      run: |
        kubectl create namespace argo
        kubectl apply -k "github.com/kubeflow/pipelines/manifests/kustomize/env/platform-agnostic?ref=$PIPELINE_VERSION"
        kubectl -n kubeflow wait applications/pipeline --for condition=Ready --timeout=1800s
        nohup kubectl -n kubeflow port-forward svc/ml-pipeline-ui 8080:80 &
        sleep 10
        curl -k -L localhost:8080/pipeline/apis/v1beta1/experiments?
        kubectl apply -n argo -f https://raw.githubusercontent.com/argoproj/argo/stable/manifests/install.yaml
    - name: SonarCloud Scan
      uses: sonarsource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    - name: Build and push image
      uses: docker/build-push-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        registry: registry.hub.docker.com
        repository: platiagro/pipelines
        tags: ${{ steps.var.outputs.TAG }}
