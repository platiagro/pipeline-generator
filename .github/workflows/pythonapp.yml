# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python application

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_DATABASE: platiagro
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: Code review tips
      uses: unsplash/comment-on-pr@master
      if: ${{ github.event_name == 'pull_request' && github.event.action == 'opened' }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        msg: |
          ## Dicas para revisão de código

          ### Commits
          - Título (1a linha do commit): apresentar resumo do que foi alterado/adicionado/removido.
            ex: adiciona action que salva parametros no backend; exibe rótulo no componente de selecao de dataset;
          - Descrição (outras linhas): dar mais detalhes de cada alteração:
            - motivos das alterações
              ex: havia um bug que causava...; nova funcionalidade que faz isso...; código foi movido para...;
            - bibliotecas adicionadas e versões (requirements.txt)
              ex: atualiza para Kubeflow Pipelines SDK 1.0.3;
            - testes unitários criados/alterados
              ex: adiciona testes para a API GET /trainings/{trainingId}/operators/{operatorId};
            - alterações do `swagger.yaml`
              ex: adiciona documentação para `PUT /trainings/{trainingId}`
          - Mensagens auto-explicativas! Quem revisa o código deve entender o que foi feito (e porque foi feito) **sem perguntar para quem fez o commit**.
          - Não devem ter conflitos. Solicitar que sejam resolvidas as ocorrências de "This branch has conflicts that must be resolved".

          ### SonarCloud Quality Gate
          - Coverage > 80.0%, e sempre que possível = 100%
          - 0 Bugs, 0 Code Smells, 0 Vulnerabilities
          - São permitidos os seguintes Security Hotspots:
            - Make sure this permissive CORS policy is safe here.
            - Make sure publicly writable directories are used safely here.
            - Using http protocol is insecure. Use https instead.
            - Make sure disabling CSRF protection is safe here.

          ### Build Github actions COM SUCESSO

          ### Python
          - Usar Python 3.6
          - Remover `print`.
          - Não deixar código-fonte comentado.
          - f-string `f'text-{variable}'` é melhor que `'text-{}'.format(variable)` e `'text-' + variable`
          - async/await NÃO EXISTEM no Python3.6
          - Métodos que são chamados de outros arquivos `.py` **DEVEM TER Docstring**.
          - Usar Google Style Python Docstring: https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html
          - Usar sempre import absoluto.
            ex: `from pipelines.database import Base` (BOM), `from .database import Base (RUIM)`
    - name: Set output variables
      id: vars
      run: |
        echo ${{ github.ref }}
        if [ ${{ github.ref }} = "refs/heads/master" ]; then
          echo ::set-output name=TAG::0.2.0
        else
          echo ::set-output name=TAG::0.2.0
        fi
        echo ::set-output name=BRANCH::${{ github.ref }}
        echo ::set-output name=COMMIT::${{ github.sha }}
    - uses: actions/checkout@v2
    - name: Set up Python 3.6
      uses: actions/setup-python@v1
      with:
        python-version: 3.6
    - name: Build and push image
      if: ${{ always() }}
      uses: docker/build-push-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        registry: registry.hub.docker.com
        repository: platiagro/pipelines
        tags: ${{ steps.vars.outputs.TAG }}
        build_args: COMMIT=${{ steps.vars.outputs.COMMIT }},BRANCH=${{ steps.vars.outputs.BRANCH }}
